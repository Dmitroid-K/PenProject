import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class PenTest {

    private final int zeroCapacity = 0;
    private final int capacity = 10;
    private final double sizeByDefault = 1.0;
    private final double sizeTwo = 2.0;
    private final String redColor = "RED";
    private final String colorByDefault = "BLUE";


    @DataProvider(name = "pens-provider")
    public Object[][] pensProvider() {
        return new Object[][]{
                { new Pen(zeroCapacity) },
                { new Pen(capacity,sizeTwo) },
                { new Pen(capacity,sizeByDefault,redColor) }
        };
    }

    @Test(dataProvider = "pens-provider")
    public void constructorTest(Pen pen){
        Assert.assertNotNull(pen);
    }

    @DataProvider(name = "pens-provider-for-test-get-color")
    public Object[][] pensProviderForTestGetColor() {
        return new Object[][]{
                { new Pen(zeroCapacity), colorByDefault },
                { new Pen(capacity,sizeTwo), colorByDefault },
                { new Pen(capacity,sizeByDefault,redColor), redColor }
        };
    }

    @Test(dataProvider = "pens-provider-for-test-get-color")
    public void testGetColor(Object[] penAndColor){
        Pen pen = (Pen) penAndColor[0];
        String expectedColor = (String) penAndColor[1];
        Assert.assertEquals(pen.getColor(), expectedColor);

    }

    @DataProvider(name = "words-provider")
    public Object[][] wordsProvider() {

        return new Object[][] {
                {new Pen(zeroCapacity), "vegetables", "" },
                {new Pen(capacity,sizeTwo), "vegetables", "veget" },
                {new Pen(capacity,sizeByDefault,redColor), "vegetables", "vegetables" },
                {new Pen(zeroCapacity), "Hello, world!", "" },
                {new Pen(capacity,sizeTwo), "Hello, world!", "Hello" },
                {new Pen(capacity,sizeByDefault,redColor), "Hello, world!", "Hello, worl" }
        };

    }

    @Test(dataProvider = "words-provider", dependsOnMethods = {"testIsWork"})
    public void testWrite(Object[] penAndWords) {
        Pen pen = (Pen) penAndWords[0];
        String input = (String) penAndWords[1];
        String expectedResult = (String) penAndWords[2];
        Assert.assertEquals(pen.write(input), expectedResult);
    }

    @DataProvider(name = "pens-provider-for-is-work")
    public Object[][] pensProviderForIsWork() {
        return new Object[][]{
                { new Pen(zeroCapacity), false },
                { new Pen(capacity,sizeTwo), true },
                { new Pen(capacity,sizeByDefault,redColor), true }
        };
    }
    @Test(dataProvider = "pens-provider-for-is-work")
    public void testIsWork(Object[] penAndBoolean) {
        Pen pen = (Pen) penAndBoolean[0];
        Boolean b = (Boolean) penAndBoolean[1];
        Assert.assertEquals(pen.isWork(), b);

    }
}
