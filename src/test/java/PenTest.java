import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

public class PenTest {

    private Pen emptyPen;
    private Pen boldPen;
    private Pen redPen;
    private final int zeroCapacity = 0;
    private final int capacity = 10;
    private final double sizeByDefault = 1.0;
    private final double sizeTwo = 2.0;
    private final String redColor = "RED";
    private final String colorByDefault = "BLUE";



    @DataProvider(name="data-provider")
    public Object[][] dataProviderMethod() {

        return new Object[][] { {"vegetables", "", "veget", "vegetables"}, {"Hello, world!", "", "Hello", "Hello, worl"} };

    }

    @BeforeMethod
    public void createPens(){
        emptyPen = new Pen(zeroCapacity);
        boldPen = new Pen(capacity,sizeTwo);
        redPen = new Pen(capacity,sizeByDefault,redColor);
    }

    @Test
    public void testGetColor(){
        SoftAssert softAssert = new SoftAssert();
        softAssert.assertEquals(emptyPen.getColor(), colorByDefault);
        softAssert.assertEquals(boldPen.getColor(), colorByDefault);
        softAssert.assertEquals(redPen.getColor(), redColor);
        softAssert.assertAll();
    }

    @Test(dataProvider = "data-provider", dependsOnMethods = {"testIsWork"})
    public void testWrite(String[] words) {
        SoftAssert softAssert = new SoftAssert();
        softAssert.assertEquals(emptyPen.write(words[0]), words[1]);
        softAssert.assertEquals(boldPen.write(words[0]), words[2]);
        softAssert.assertEquals(redPen.write(words[0]), words[3]);
        softAssert.assertAll();
    }

    @Test()
    public void testIsWork() {
        SoftAssert softAssert = new SoftAssert();
        softAssert.assertFalse(emptyPen.isWork());
        softAssert.assertTrue(boldPen.isWork());
        softAssert.assertTrue(redPen.isWork());
        softAssert.assertAll();
    }
}
